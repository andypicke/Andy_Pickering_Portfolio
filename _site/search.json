[
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "posts/EV_station_mapping/ev_station_mapping.html",
    "href": "posts/EV_station_mapping/ev_station_mapping.html",
    "title": "Mapping the Number of EV Charging Stations by County in Colorado Using R",
    "section": "",
    "text": "As you may know from a previous post I am interested in electric-vehicle (EV) trends and the transition to a more electrified transportation fleet. I wanted to do some mapping and spatial analysis, and I recently took the Creating Maps with R course by Charlie Joey Hadley, so I decided to use some of the skills I learned to create some maps of EV charging station data for Colorado.\n\n\nMy goal in this post is to create choropleth map(s) showing the number of EV charging stations per county in Colorado."
  },
  {
    "objectID": "posts/EV_station_mapping/ev_station_mapping.html#goal",
    "href": "posts/EV_station_mapping/ev_station_mapping.html#goal",
    "title": "Mapping the Number of EV Charging Stations by County in Colorado Using R",
    "section": "",
    "text": "My goal in this post is to create choropleth map(s) showing the number of EV charging stations per county in Colorado."
  },
  {
    "objectID": "posts/EV_station_mapping/ev_station_mapping.html#ev-stations-data",
    "href": "posts/EV_station_mapping/ev_station_mapping.html#ev-stations-data",
    "title": "Mapping the Number of EV Charging Stations by County in Colorado Using R",
    "section": "EV Stations data",
    "text": "EV Stations data\nData on EV stations is obtained from the Alternative Fuels Data Center’s Alternative Fuel Stations database. See my previous post for more details on getting the data from the API.\n\nCode# API key is stored in my .Renviron file\napi_key &lt;- Sys.getenv(\"AFDC_KEY\")\n\ntarget &lt;- \"https://developer.nrel.gov/api/alt-fuel-stations/v1\"\n# Return data for all electric stations in Colorado\napi_path &lt;- \".json?&fuel_type=ELEC&state=CO&limit=all\"\n\ncomplete_api_path &lt;- paste0(target,api_path,'&api_key=',api_key)\n\nresponse &lt;- httr::GET(url = complete_api_path)\n\nif (response$status_code != 200) {\n print(paste('Warning, API call returned error code', response$status_code))\n}\n\n\nev_dat &lt;- jsonlite::fromJSON(httr::content(response,\"text\"))\n\nev &lt;- ev_dat$fuel_stations\n\n# filter out non-EV related fields\nev &lt;- ev %&gt;% select(-dplyr::starts_with(\"lng\")) %&gt;% \n  select(-starts_with(\"cng\")) %&gt;%\n  select(-starts_with(\"lpg\")) %&gt;%\n  select(-starts_with(\"hy\")) %&gt;% \n  select(-starts_with(\"ng\")) %&gt;% \n  select(-starts_with(\"e85\")) %&gt;% \n  select(-starts_with(\"bd\")) %&gt;% \n  select(-starts_with(\"rd\")) %&gt;% \n  filter(status_code == 'E')"
  },
  {
    "objectID": "posts/EV_station_mapping/ev_station_mapping.html#county-data",
    "href": "posts/EV_station_mapping/ev_station_mapping.html#county-data",
    "title": "Mapping the Number of EV Charging Stations by County in Colorado Using R",
    "section": "County data",
    "text": "County data\nNext I need shape files for the Colorado counties to make the map; these are obtained from the tigris package.\n\nCodeoptions(tigris_use_cache = TRUE)\nco_counties &lt;- tigris::counties(\"CO\",cb = TRUE)\n\nRetrieving data for the year 2021\n\nCodehead(co_counties)\n\nSimple feature collection with 6 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -109.0603 ymin: 36.99902 xmax: -104.6606 ymax: 39.92525\nGeodetic CRS:  NAD83\n    STATEFP COUNTYFP COUNTYNS       AFFGEOID GEOID      NAME         NAMELSAD\n7        08      037 00198134 0500000US08037 08037     Eagle     Eagle County\n150      08      059 00198145 0500000US08059 08059 Jefferson Jefferson County\n151      08      067 00198148 0500000US08067 08067  La Plata  La Plata County\n165      08      077 00198154 0500000US08077 08077      Mesa      Mesa County\n174      08      035 00198133 0500000US08035 08035   Douglas   Douglas County\n209      08      043 00198137 0500000US08043 08043   Fremont   Fremont County\n    STUSPS STATE_NAME LSAD      ALAND   AWATER                       geometry\n7       CO   Colorado   06 4362754228 18970639 MULTIPOLYGON (((-107.1137 3...\n150     CO   Colorado   06 1979735379 25071495 MULTIPOLYGON (((-105.0558 3...\n151     CO   Colorado   06 4376255277 25642579 MULTIPOLYGON (((-108.3796 3...\n165     CO   Colorado   06 8621348071 31991710 MULTIPOLYGON (((-109.0603 3...\n174     CO   Colorado   06 2176020279  6795841 MULTIPOLYGON (((-105.3274 3...\n209     CO   Colorado   06 3972613670  2235542 MULTIPOLYGON (((-106.0123 3..."
  },
  {
    "objectID": "posts/EV_station_mapping/ev_station_mapping.html#zip-codes",
    "href": "posts/EV_station_mapping/ev_station_mapping.html#zip-codes",
    "title": "Mapping the Number of EV Charging Stations by County in Colorado Using R",
    "section": "Zip codes",
    "text": "Zip codes\nI have the EV station data and the county shape files, so the next step is to join them together. However, I have a problem: the EV stations data does not contain the county name or code, so I can’t join them yet without a common column. There are probably a lot of different solutions to this problem (for example the EV data contains addresses so I could geo-code these to get the county). In this case, I decided the easiest solution was to download the zip code database from the USPS (free for personal use), which contains both zip codes and their corresponding county.\n\nCodezips &lt;- readr::read_csv(\"data/zip_code_database.csv\",\n                        show_col_types = FALSE) %&gt;% \n  filter(state == \"CO\") %&gt;% \n  select(zip, primary_city, county)\n\nhead(zips)\n\n# A tibble: 6 × 3\n  zip   primary_city county          \n  &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;           \n1 80001 Arvada       Jefferson County\n2 80002 Arvada       Jefferson County\n3 80003 Arvada       Jefferson County\n4 80004 Arvada       Jefferson County\n5 80005 Arvada       Jefferson County\n6 80006 Arvada       Jefferson County\n\n\nNext I compute the number of stations per zip code in the EV data, and join to the zip code database to add the county column.\n\nCodeev_county_counts &lt;- ev %&gt;% \n  select(id,zip,city) %&gt;% \n  left_join(zips, by = \"zip\") %&gt;% \n  dplyr::count(county) %&gt;% \n  arrange(desc(n))\n\nhead(ev_county_counts)\n\n            county   n\n1    Denver County 320\n2   Boulder County 303\n3   Larimer County 145\n4 Jefferson County 142\n5  Arapahoe County 118\n6     Eagle County 103"
  },
  {
    "objectID": "posts/EV_station_mapping/ev_station_mapping.html#combining-data",
    "href": "posts/EV_station_mapping/ev_station_mapping.html#combining-data",
    "title": "Mapping the Number of EV Charging Stations by County in Colorado Using R",
    "section": "Combining data",
    "text": "Combining data\nNow we can finally join the data we want to plot (# EV stations per county) in ev_county_counts to our sf object (co_counties) with the county spatial data, and we are ready to make some maps.\n\nCodeco_ev_counts &lt;- co_counties %&gt;% \n  left_join(ev_county_counts, by = c(\"NAMELSAD\" = \"county\"))\n\nhead(co_ev_counts)\n\nSimple feature collection with 6 features and 13 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -109.0603 ymin: 36.99902 xmax: -104.6606 ymax: 39.92525\nGeodetic CRS:  NAD83\n  STATEFP COUNTYFP COUNTYNS       AFFGEOID GEOID      NAME         NAMELSAD\n1      08      037 00198134 0500000US08037 08037     Eagle     Eagle County\n2      08      059 00198145 0500000US08059 08059 Jefferson Jefferson County\n3      08      067 00198148 0500000US08067 08067  La Plata  La Plata County\n4      08      077 00198154 0500000US08077 08077      Mesa      Mesa County\n5      08      035 00198133 0500000US08035 08035   Douglas   Douglas County\n6      08      043 00198137 0500000US08043 08043   Fremont   Fremont County\n  STUSPS STATE_NAME LSAD      ALAND   AWATER   n                       geometry\n1     CO   Colorado   06 4362754228 18970639 103 MULTIPOLYGON (((-107.1137 3...\n2     CO   Colorado   06 1979735379 25071495 142 MULTIPOLYGON (((-105.0558 3...\n3     CO   Colorado   06 4376255277 25642579  30 MULTIPOLYGON (((-108.3796 3...\n4     CO   Colorado   06 8621348071 31991710  47 MULTIPOLYGON (((-109.0603 3...\n5     CO   Colorado   06 2176020279  6795841  57 MULTIPOLYGON (((-105.3274 3...\n6     CO   Colorado   06 3972613670  2235542   6 MULTIPOLYGON (((-106.0123 3..."
  },
  {
    "objectID": "posts/EV_station_mapping/ev_station_mapping.html#ggplot",
    "href": "posts/EV_station_mapping/ev_station_mapping.html#ggplot",
    "title": "Mapping the Number of EV Charging Stations by County in Colorado Using R",
    "section": "ggplot",
    "text": "ggplot\n\nggplot2 makes it relatively easy to plot spatial data in an sf object with geom_sf\nI’m also use the scales (Wickham and Seidel 2022) package to format the numbers in the legend\n\n\nCodeggplot() +\n  geom_sf(data = co_ev_counts,\n          aes(fill = n)) +\n  scale_fill_viridis_c(labels = scales::number_format(big.mark = \",\"),\n                       name = '# Ev Stations') +\n  ggtitle(\"Number of EV Stations by Colorado County\") +\n  theme_void()\n\n\n\nChoropleth map of number of EV charging stations by county"
  },
  {
    "objectID": "posts/EV_station_mapping/ev_station_mapping.html#leaflet",
    "href": "posts/EV_station_mapping/ev_station_mapping.html#leaflet",
    "title": "Mapping the Number of EV Charging Stations by County in Colorado Using R",
    "section": "Leaflet",
    "text": "Leaflet\nUsing leaflet requires a little more code but allows you to create an interactive map that can be more useful to the reader.\n\nIn the map below I’ve set the popup to display the county name and number of stations when you click on the map.\nYou can also drag the map around and zoom in/out.\nIt’s also very easy with Leaflet to add a basemap (OpenStreetMap in this case) layer under the choropleth. I decided to add this here to give readers a better sense of context, and also because I wanted to highlight that the counties close to major highways (I-70 east-west and I-25 north-south) appear to have higher numbers of chargers.\nNote I’ve also included some code using from the Creating Maps in R course to fix an issue in the legend where the NA entry overlaps with the other entries.\n\n\nCode# create color palette\npal_ev &lt;- leaflet::colorNumeric(palette = \"viridis\",\n                                 domain = co_ev_counts$n)\n\nco_ev_map &lt;- leaflet() %&gt;% \n  addTiles() %&gt;% # adds OpenStretMap basemap\n  addPolygons(data = co_ev_counts,\n              weight = 1,\n              color = \"black\",\n              popup = paste(co_ev_counts$NAME, \"&lt;br&gt;\",\n                            \" EV Stations: \", co_ev_counts$n, \"&lt;br&gt;\"),\n              fillColor = ~pal_ev(n),\n              fillOpacity = 0.6) %&gt;% \n  addLegend(data = co_ev_counts,\n            pal = pal_ev,\n            values = ~n,\n            opacity = 1,\n            title = \"# of EV Stations &lt;br&gt;\n            Per County\"\n            )\n\nWarning: sf layer has inconsistent datum (+proj=longlat +datum=NAD83 +no_defs).\nNeed '+proj=longlat +datum=WGS84'\n\nCode# legend fix --------------------------------------------------------------\n# for issue with na in legend\nhtml_fix &lt;- htmltools::tags$style(type = \"text/css\", \"div.info.legend.leaflet-control br {clear: both;}\") \n\nco_ev_map %&gt;% \n  htmlwidgets::prependContent(html_fix)\n\n\n\nChoropleth map of number of EV charging stations by county"
  },
  {
    "objectID": "posts/EV_Stations/index.html",
    "href": "posts/EV_Stations/index.html",
    "title": "EV Charging Stations Analysis",
    "section": "",
    "text": "Recently I’ve been interested in analyzing trends in electric vehicle (EV) charging stations, using data from the Alternative Fuels Data Center’s Alternative Fuel Stations database. In this first post I’ll go over retrieving the data via an API, getting it into a tidy format, and some initial analysis and visualization.\n\nI’ll retrieve the EV station data using the AFDC API. The documentation for the AFDC fuel-stations API can be found at: https://developer.nrel.gov/docs/transportation/alt-fuel-stations-v1/all/#station-count-record-fields\n\nYou can obtain a free API key at: [https://developer.nrel.gov/signup/]. I’ve saved my API key in my local .Renviron file so I can load it without exposing the key in my code.\nI will request data for all EV stations in Colorado.\nI’ll retrieve the data from the API using the httr (Wickham 2023) package.\n\n\nCode# API key is stored in my .Renviron file\napi_key &lt;- Sys.getenv(\"AFDC_KEY\")\n\n# base url for AFDC alternative fuel stations API\ntarget &lt;- \"https://developer.nrel.gov/api/alt-fuel-stations/v1\"\n\n# Return data for all electric stations in Colorado\napi_path &lt;-\".json?&fuel_type=ELEC&state=CO&limit=all\"\n\ncomplete_api_path &lt;- paste0(target,api_path,'&api_key=',api_key)\n\nresponse &lt;- httr::GET(url=complete_api_path)\n\nif (response$status_code !=200){\n print(paste('Warning, API call returned error code',response$status_code))\n}\n\nresponse$status_code\n\n[1] 200\n\n\n\nThe result returned from the API is a response object, and the data is in JSON format. The response (which I’m not printing here because would show my API key) contains a status code; a code of 200 means the API request was successful. Some of the general error codes the API might return are described here.\nI’ll use the jsonlite (Ooms 2014) package to convert the JSON to R.\n\n\nCodeev_dat &lt;- jsonlite::fromJSON(httr::content(response,\"text\"))\n\nclass(ev_dat)\n\n[1] \"list\"\n\nCodenames(ev_dat)\n\n[1] \"station_locator_url\" \"total_results\"       \"station_counts\"     \n[4] \"fuel_stations\"      \n\n\n\nThe converted response is actually a list containing the data as well as some metadata about the request.\nThe total_results field gives the total number of fuel station records match your requested query (regardless of any limit applied).\n\n\nCodeev_dat$total_results\n\n[1] 2049\n\n\n\n\nThe *station_counts* field gives a breakdown by fuel type (here I requested only electric so the counts for all other fuel types are zero).\n\ntotal includes the number of individual chargers/plugs, which is why it is greater than the station count.\nIn this case, there are 2049 stations, and a total of 4910 chargers/plugs.\n\n\n\n\nCodeev_dat$station_counts$fuels$ELEC\n\n$total\n[1] 4910\n\n$stations\n$stations$total\n[1] 2049\n\n\nFinally, the data we want to analyze is in the fuel_stations data frame.\n\nCodeev &lt;- ev_dat$fuel_stations\n\n\n\nThe returned data contains many non-electric fields that we don’t need (they will all be NA since we requested electric fuel type only), so I’ll remove the non-relevant fields from the data frame to clean things up a bit, using the starts_with function from the Wickham et al. (2023) package. - I’ll also change the date column type and add a variable for year opened, since I want to look at how many stations were opened over time.\n\nCode# filter out non-EV related fields\nev &lt;- ev %&gt;% select(-dplyr::starts_with(\"lng\")) %&gt;% \n  select(-starts_with(\"cng\")) %&gt;%\n  select(-starts_with(\"lpg\")) %&gt;%\n  select(-starts_with(\"hy\")) %&gt;% \n  select(-starts_with(\"ng\")) %&gt;% \n  select(-starts_with(\"e85\")) %&gt;% \n  select(-starts_with(\"bd\")) %&gt;% \n  select(-starts_with(\"rd\")) %&gt;% \n  filter(status_code=='E')\n\n\n# change date field to date type and add a year opened variable\nev$open_date &lt;- lubridate::ymd(ev$open_date)\nev$open_year &lt;- lubridate::year(ev$open_date)\n\ncolnames(ev)\n\n [1] \"access_code\"                \"access_days_time\"          \n [3] \"access_detail_code\"         \"cards_accepted\"            \n [5] \"date_last_confirmed\"        \"expected_date\"             \n [7] \"fuel_type_code\"             \"groups_with_access_code\"   \n [9] \"id\"                         \"open_date\"                 \n[11] \"owner_type_code\"            \"status_code\"               \n[13] \"restricted_access\"          \"maximum_vehicle_class\"     \n[15] \"station_name\"               \"station_phone\"             \n[17] \"updated_at\"                 \"facility_type\"             \n[19] \"geocode_status\"             \"latitude\"                  \n[21] \"longitude\"                  \"city\"                      \n[23] \"intersection_directions\"    \"plus4\"                     \n[25] \"state\"                      \"street_address\"            \n[27] \"zip\"                        \"country\"                   \n[29] \"ev_connector_types\"         \"ev_dc_fast_num\"            \n[31] \"ev_level1_evse_num\"         \"ev_level2_evse_num\"        \n[33] \"ev_network\"                 \"ev_network_web\"            \n[35] \"ev_other_evse\"              \"ev_pricing\"                \n[37] \"ev_renewable_source\"        \"nps_unit_name\"             \n[39] \"access_days_time_fr\"        \"intersection_directions_fr\"\n[41] \"groups_with_access_code_fr\" \"ev_pricing_fr\"             \n[43] \"ev_network_ids\"             \"federal_agency\"            \n[45] \"open_year\"                 \n\n\n\n\n\nFirst I’d like to look at how many EV stations opened over time, so I’ll make a new data frame summarizing the number of stations opened by year.\n\nCodeev_opened &lt;- ev %&gt;% \n  count(open_year,name = \"nopened\")  %&gt;% \n  filter(!is.na(open_year))\n\nhead(ev_opened)\n\n  open_year nopened\n1      2010       2\n2      2011      13\n3      2012      30\n4      2013      18\n5      2014      35\n6      2015      57\n\n\n\n\nCodeev_opened %&gt;% ggplot(aes(open_year, nopened)) + \n  geom_col()+\n  xlab(\"Year Opened\")+\n  ylab(\"# Stations Opened\")+\n  ggtitle('EV Stations Opened in Colorado Each Year')+\n  theme_grey(base_size = 15)+\n  geom_text(aes(label = nopened), vjust = 0)\n\n\n\nNumber of EV Charging Stations Opend In Colorado\n\n\n\n\nWe can also look at the cumulative sum of stations opened over time\n\nCode#| fig-width: 8\n\nev_opened %&gt;% ggplot(aes(open_year,cumsum(nopened)))+\n  geom_line(linewidth=1.5)+\n  geom_point()+\n  xlab(\"Year\")+\n  ylab(\"# Stations\")+\n  ggtitle(\"Cumulative sum of EV stations opened in CO\")+\n  theme_grey(base_size = 15)\n\n\n\n\n\nNext I want to dig a little deeper and break down the station openings by charger type and/or level. I’d expect to see more Level 2 chargers in earlier years, and an increase in DC fast charging stations in more recent years. I’ll make a new data frame with the number of chargers opened by year, grouped by charging level (Level 1, Level 2, or DC fast).\n\n\nNote here I’m working with the number of chargers of each level, not the number of stations.\n\n\nCodeev_opened_level &lt;- ev %&gt;% \n  select(id,open_date,\n         open_year,\n         ev_dc_fast_num,\n         ev_level2_evse_num,ev_level1_evse_num) %&gt;%\n  group_by(open_year) %&gt;%\n  summarize(n_DC=sum(ev_dc_fast_num,na.rm = TRUE), \n            n_L2=sum(ev_level2_evse_num,na.rm = TRUE),\n            n_L1=sum(ev_level1_evse_num,na.rm = TRUE) ) %&gt;% \n  filter(!is.na(open_year))\n\nhead(ev_opened_level)\n\n# A tibble: 6 × 4\n  open_year  n_DC  n_L2  n_L1\n      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1      2010     1    21    18\n2      2011     1    17     0\n3      2012     9    41     0\n4      2013    20    31    28\n5      2014    24    62     0\n6      2015    29   127     0\n\n\nTo make plotting easier, I’ll pivot the dataframe from wide to long format so I can group by charging level:\n\nCodeev_opened_level_long &lt;- ev_opened_level %&gt;% \n  tidyr::pivot_longer(cols=c('n_DC','n_L2','n_L1'),\n                      names_to = \"Level\",\n                      names_prefix = \"n_\",\n                      values_to = \"n_opened\")\n\nhead(ev_opened_level_long)\n\n# A tibble: 6 × 3\n  open_year Level n_opened\n      &lt;dbl&gt; &lt;chr&gt;    &lt;int&gt;\n1      2010 DC           1\n2      2010 L2          21\n3      2010 L1          18\n4      2011 DC           1\n5      2011 L2          17\n6      2011 L1           0\n\n\nNow I can go ahead and plot the number of chargers opened over time, by level.\n\nCode#| fig-width: 8\n\nev_opened_level_long %&gt;% \n  ggplot(aes(open_year, n_opened, group=Level)) +\n  geom_line(aes(col=Level), linewidth=1.5)+\n  geom_point(aes(col=Level))+\n  xlab(\"Year Opened\")+\n  ylab(\"# Charges Opened\")+\n  ggtitle(\"Number of Chargers Opened Per Year By Level\")\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.3 (2023-03-15)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur ... 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2    ggplot2_3.4.2  jsonlite_1.8.5 httr_1.4.6    \n\nloaded via a namespace (and not attached):\n [1] pillar_1.9.0     compiler_4.2.3   tools_4.2.3      digest_0.6.31   \n [5] lubridate_1.9.2  evaluate_0.21    lifecycle_1.0.3  tibble_3.2.1    \n [9] gtable_0.3.3     timechange_0.2.0 pkgconfig_2.0.3  rlang_1.1.1     \n[13] cli_3.6.1        rstudioapi_0.14  curl_5.0.1       yaml_2.3.7      \n[17] xfun_0.39        fastmap_1.1.1    withr_2.5.0      knitr_1.43      \n[21] generics_0.1.3   vctrs_0.6.2      grid_4.2.3       tidyselect_1.2.0\n[25] glue_1.6.2       R6_2.5.1         fansi_1.0.4      rmarkdown_2.22  \n[29] purrr_1.0.1      tidyr_1.3.0      farver_2.1.1     magrittr_2.0.3  \n[33] scales_1.2.1     htmltools_0.5.5  colorspace_2.1-0 renv_0.17.3     \n[37] labeling_0.4.2   utf8_1.2.3       munsell_0.5.0"
  },
  {
    "objectID": "posts/EV_Stations/index.html#data",
    "href": "posts/EV_Stations/index.html#data",
    "title": "EV Charging Stations Analysis",
    "section": "",
    "text": "I’ll retrieve the EV station data using the AFDC API. The documentation for the AFDC fuel-stations API can be found at: https://developer.nrel.gov/docs/transportation/alt-fuel-stations-v1/all/#station-count-record-fields\n\nYou can obtain a free API key at: [https://developer.nrel.gov/signup/]. I’ve saved my API key in my local .Renviron file so I can load it without exposing the key in my code.\nI will request data for all EV stations in Colorado.\nI’ll retrieve the data from the API using the httr (Wickham 2023) package.\n\n\nCode# API key is stored in my .Renviron file\napi_key &lt;- Sys.getenv(\"AFDC_KEY\")\n\n# base url for AFDC alternative fuel stations API\ntarget &lt;- \"https://developer.nrel.gov/api/alt-fuel-stations/v1\"\n\n# Return data for all electric stations in Colorado\napi_path &lt;-\".json?&fuel_type=ELEC&state=CO&limit=all\"\n\ncomplete_api_path &lt;- paste0(target,api_path,'&api_key=',api_key)\n\nresponse &lt;- httr::GET(url=complete_api_path)\n\nif (response$status_code !=200){\n print(paste('Warning, API call returned error code',response$status_code))\n}\n\nresponse$status_code\n\n[1] 200\n\n\n\nThe result returned from the API is a response object, and the data is in JSON format. The response (which I’m not printing here because would show my API key) contains a status code; a code of 200 means the API request was successful. Some of the general error codes the API might return are described here.\nI’ll use the jsonlite (Ooms 2014) package to convert the JSON to R.\n\n\nCodeev_dat &lt;- jsonlite::fromJSON(httr::content(response,\"text\"))\n\nclass(ev_dat)\n\n[1] \"list\"\n\nCodenames(ev_dat)\n\n[1] \"station_locator_url\" \"total_results\"       \"station_counts\"     \n[4] \"fuel_stations\"      \n\n\n\nThe converted response is actually a list containing the data as well as some metadata about the request.\nThe total_results field gives the total number of fuel station records match your requested query (regardless of any limit applied).\n\n\nCodeev_dat$total_results\n\n[1] 2049\n\n\n\n\nThe *station_counts* field gives a breakdown by fuel type (here I requested only electric so the counts for all other fuel types are zero).\n\ntotal includes the number of individual chargers/plugs, which is why it is greater than the station count.\nIn this case, there are 2049 stations, and a total of 4910 chargers/plugs.\n\n\n\n\nCodeev_dat$station_counts$fuels$ELEC\n\n$total\n[1] 4910\n\n$stations\n$stations$total\n[1] 2049\n\n\nFinally, the data we want to analyze is in the fuel_stations data frame.\n\nCodeev &lt;- ev_dat$fuel_stations\n\n\n\nThe returned data contains many non-electric fields that we don’t need (they will all be NA since we requested electric fuel type only), so I’ll remove the non-relevant fields from the data frame to clean things up a bit, using the starts_with function from the Wickham et al. (2023) package. - I’ll also change the date column type and add a variable for year opened, since I want to look at how many stations were opened over time.\n\nCode# filter out non-EV related fields\nev &lt;- ev %&gt;% select(-dplyr::starts_with(\"lng\")) %&gt;% \n  select(-starts_with(\"cng\")) %&gt;%\n  select(-starts_with(\"lpg\")) %&gt;%\n  select(-starts_with(\"hy\")) %&gt;% \n  select(-starts_with(\"ng\")) %&gt;% \n  select(-starts_with(\"e85\")) %&gt;% \n  select(-starts_with(\"bd\")) %&gt;% \n  select(-starts_with(\"rd\")) %&gt;% \n  filter(status_code=='E')\n\n\n# change date field to date type and add a year opened variable\nev$open_date &lt;- lubridate::ymd(ev$open_date)\nev$open_year &lt;- lubridate::year(ev$open_date)\n\ncolnames(ev)\n\n [1] \"access_code\"                \"access_days_time\"          \n [3] \"access_detail_code\"         \"cards_accepted\"            \n [5] \"date_last_confirmed\"        \"expected_date\"             \n [7] \"fuel_type_code\"             \"groups_with_access_code\"   \n [9] \"id\"                         \"open_date\"                 \n[11] \"owner_type_code\"            \"status_code\"               \n[13] \"restricted_access\"          \"maximum_vehicle_class\"     \n[15] \"station_name\"               \"station_phone\"             \n[17] \"updated_at\"                 \"facility_type\"             \n[19] \"geocode_status\"             \"latitude\"                  \n[21] \"longitude\"                  \"city\"                      \n[23] \"intersection_directions\"    \"plus4\"                     \n[25] \"state\"                      \"street_address\"            \n[27] \"zip\"                        \"country\"                   \n[29] \"ev_connector_types\"         \"ev_dc_fast_num\"            \n[31] \"ev_level1_evse_num\"         \"ev_level2_evse_num\"        \n[33] \"ev_network\"                 \"ev_network_web\"            \n[35] \"ev_other_evse\"              \"ev_pricing\"                \n[37] \"ev_renewable_source\"        \"nps_unit_name\"             \n[39] \"access_days_time_fr\"        \"intersection_directions_fr\"\n[41] \"groups_with_access_code_fr\" \"ev_pricing_fr\"             \n[43] \"ev_network_ids\"             \"federal_agency\"            \n[45] \"open_year\""
  },
  {
    "objectID": "posts/EV_Stations/index.html#analysis",
    "href": "posts/EV_Stations/index.html#analysis",
    "title": "EV Charging Stations Analysis",
    "section": "",
    "text": "First I’d like to look at how many EV stations opened over time, so I’ll make a new data frame summarizing the number of stations opened by year.\n\nCodeev_opened &lt;- ev %&gt;% \n  count(open_year,name = \"nopened\")  %&gt;% \n  filter(!is.na(open_year))\n\nhead(ev_opened)\n\n  open_year nopened\n1      2010       2\n2      2011      13\n3      2012      30\n4      2013      18\n5      2014      35\n6      2015      57\n\n\n\n\nCodeev_opened %&gt;% ggplot(aes(open_year, nopened)) + \n  geom_col()+\n  xlab(\"Year Opened\")+\n  ylab(\"# Stations Opened\")+\n  ggtitle('EV Stations Opened in Colorado Each Year')+\n  theme_grey(base_size = 15)+\n  geom_text(aes(label = nopened), vjust = 0)\n\n\n\nNumber of EV Charging Stations Opend In Colorado\n\n\n\n\nWe can also look at the cumulative sum of stations opened over time\n\nCode#| fig-width: 8\n\nev_opened %&gt;% ggplot(aes(open_year,cumsum(nopened)))+\n  geom_line(linewidth=1.5)+\n  geom_point()+\n  xlab(\"Year\")+\n  ylab(\"# Stations\")+\n  ggtitle(\"Cumulative sum of EV stations opened in CO\")+\n  theme_grey(base_size = 15)\n\n\n\n\n\nNext I want to dig a little deeper and break down the station openings by charger type and/or level. I’d expect to see more Level 2 chargers in earlier years, and an increase in DC fast charging stations in more recent years. I’ll make a new data frame with the number of chargers opened by year, grouped by charging level (Level 1, Level 2, or DC fast).\n\n\nNote here I’m working with the number of chargers of each level, not the number of stations.\n\n\nCodeev_opened_level &lt;- ev %&gt;% \n  select(id,open_date,\n         open_year,\n         ev_dc_fast_num,\n         ev_level2_evse_num,ev_level1_evse_num) %&gt;%\n  group_by(open_year) %&gt;%\n  summarize(n_DC=sum(ev_dc_fast_num,na.rm = TRUE), \n            n_L2=sum(ev_level2_evse_num,na.rm = TRUE),\n            n_L1=sum(ev_level1_evse_num,na.rm = TRUE) ) %&gt;% \n  filter(!is.na(open_year))\n\nhead(ev_opened_level)\n\n# A tibble: 6 × 4\n  open_year  n_DC  n_L2  n_L1\n      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1      2010     1    21    18\n2      2011     1    17     0\n3      2012     9    41     0\n4      2013    20    31    28\n5      2014    24    62     0\n6      2015    29   127     0\n\n\nTo make plotting easier, I’ll pivot the dataframe from wide to long format so I can group by charging level:\n\nCodeev_opened_level_long &lt;- ev_opened_level %&gt;% \n  tidyr::pivot_longer(cols=c('n_DC','n_L2','n_L1'),\n                      names_to = \"Level\",\n                      names_prefix = \"n_\",\n                      values_to = \"n_opened\")\n\nhead(ev_opened_level_long)\n\n# A tibble: 6 × 3\n  open_year Level n_opened\n      &lt;dbl&gt; &lt;chr&gt;    &lt;int&gt;\n1      2010 DC           1\n2      2010 L2          21\n3      2010 L1          18\n4      2011 DC           1\n5      2011 L2          17\n6      2011 L1           0\n\n\nNow I can go ahead and plot the number of chargers opened over time, by level.\n\nCode#| fig-width: 8\n\nev_opened_level_long %&gt;% \n  ggplot(aes(open_year, n_opened, group=Level)) +\n  geom_line(aes(col=Level), linewidth=1.5)+\n  geom_point(aes(col=Level))+\n  xlab(\"Year Opened\")+\n  ylab(\"# Charges Opened\")+\n  ggtitle(\"Number of Chargers Opened Per Year By Level\")"
  },
  {
    "objectID": "posts/EV_Stations/index.html#session-info",
    "href": "posts/EV_Stations/index.html#session-info",
    "title": "EV Charging Stations Analysis",
    "section": "",
    "text": "CodesessionInfo()\n\nR version 4.2.3 (2023-03-15)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur ... 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2    ggplot2_3.4.2  jsonlite_1.8.5 httr_1.4.6    \n\nloaded via a namespace (and not attached):\n [1] pillar_1.9.0     compiler_4.2.3   tools_4.2.3      digest_0.6.31   \n [5] lubridate_1.9.2  evaluate_0.21    lifecycle_1.0.3  tibble_3.2.1    \n [9] gtable_0.3.3     timechange_0.2.0 pkgconfig_2.0.3  rlang_1.1.1     \n[13] cli_3.6.1        rstudioapi_0.14  curl_5.0.1       yaml_2.3.7      \n[17] xfun_0.39        fastmap_1.1.1    withr_2.5.0      knitr_1.43      \n[21] generics_0.1.3   vctrs_0.6.2      grid_4.2.3       tidyselect_1.2.0\n[25] glue_1.6.2       R6_2.5.1         fansi_1.0.4      rmarkdown_2.22  \n[29] purrr_1.0.1      tidyr_1.3.0      farver_2.1.1     magrittr_2.0.3  \n[33] scales_1.2.1     htmltools_0.5.5  colorspace_2.1-0 renv_0.17.3     \n[37] labeling_0.4.2   utf8_1.2.3       munsell_0.5.0"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Welcome to my (new) data science portfolio and blog, made with Quarto and RStudio.\nIf you’re interested in setting up your own Quarto website or blog, I highly recommend watching this tutorial by Deepsha Menghani.\nYou can still view my previous blog; I am in the process of figuring out how/if I will move that content here."
  },
  {
    "objectID": "posts/EIA_Electric_Fuel_Breakdown/index.html",
    "href": "posts/EIA_Electric_Fuel_Breakdown/index.html",
    "title": "Calculating State Electricity Generation By Fuel Type using R",
    "section": "",
    "text": "Electricity generation is a major source of carbon emissions, and transitioning to cleaner and/or renewable sources of power generation is important to lowering greenhouse gas emissions and limiting the effects of climate change (as well as other benefits such as improving air quality). With the increase in electrification (such as electric vehicles and heat pumps), transitioning to lower-carbon sources of electricity generation is even more important.\nIn general electric vehicles produce less net emissions than traditional gas-powered vehicles, but the savings depends on several factors including how the electricity used to charge an EV is produced. The Alternative Fuels Data Center has a nice tool showing the breakdown of electricity generation fuel sources by state and the resulting effects on emissions.\nI am interested in analyzing trends in electricity generation fuel sources, and this post outlines the first step: Using data from the U.S. Energy Information Administration (EIA) to calculate and reproduce the state-level breakdown in the AFDC tool.\nSome of the technical methods/topics involved in this include:\n\nRetrieving data from an API using the httr (Wickham 2023b) package\nPivoting data between long and wide formats using the tidyr (Wickham, Vaughan, and Girlich 2023) package\nPlotting data using the ggplot2 (Wickham 2016) and plotly (Sievert 2020) packages\n\n\nCodelibrary(httr)\nlibrary(jsonlite)\nlibrary(ggplot2)\ntheme_set(theme_grey(base_size = 15)) # make the default font sizes etc a little bigger\nsuppressPackageStartupMessages(library(dplyr))\nlibrary(forcats)\nsuppressPackageStartupMessages(library(plotly))\nlibrary(DT)\n\n\nI’m going to make a simple little function to retrieve data from the API, that will make things a little tidier and warn me if the API call returns an error code.\n\nCoderetrieve_api_data &lt;- function(api_path){\n  \n  response_raw &lt;- httr::GET(url=complete_api_path)\n  \n  if (response_raw$status_code!=200){\n    print(paste(\"Warning, API returned error code \",response_raw$status_code))\n  }\n  \n  return(response_raw)\n  \n}\n\n\nThe data I will use is the annual electric power generation by state from the EIA API. I’m going to just look at data for Colorado for now, and I’m looking at sector id 98: electric power.\n\nCode# API key stored in .Renviron\napi_key &lt;- Sys.getenv(\"EIA_KEY\")\n\n# base url for EIA API V2\napi_base &lt;- \"https://api.eia.gov/v2/\"\n\nroute &lt;- 'electricity'\nsubroute &lt;- \"electric-power-operational-data\"\ndata_name &lt;- 'generation'\n\nstate &lt;- 'CO'\n\n# sectorid 98= electric power \nsector_id &lt;- 98\n\n# annual\ncomplete_api_path &lt;- paste0(api_base,route,'/',subroute,'/','data/',\n                            '?frequency=annual&data[0]=',data_name,\n                            '&facets[sectorid][]=',sector_id,\n                            '&facets[location][]=',state,\n                            '&api_key=',api_key)\n\n# get the data from the API\nresponse_raw &lt;- retrieve_api_data(complete_api_path)\n\n# convert from JSON\ndat &lt;- jsonlite::fromJSON(httr::content(response_raw,\"text\"))\n\nNo encoding supplied: defaulting to UTF-8.\n\nCode# extract the dataframe \ndf &lt;- dat$response$data\n\n# rename a column and drop some extra unecessary columns\ndf &lt;- df %&gt;% rename(year=period) %&gt;% \n  select(-c(location,sectorid,sectorDescription,stateDescription))\n\nhead(df)\n\n  year fueltypeid fuelTypeDescription generation       generation-units\n1 2001        ALL           all fuels  46582.114 thousand megawatthours\n2 2001        BIT     bituminous coal         NA thousand megawatthours\n3 2001        DFO distillate fuel oil    158.640 thousand megawatthours\n4 2001        FOS        fossil fuels  45257.257 thousand megawatthours\n5 2001         NG         natural gas   9146.986 thousand megawatthours\n6 2001        ORW    other renewables     32.102 thousand megawatthours\n\n\nNote that some of the fueltype categories are subsets of, or overlap with, other categories. For example COW is all coal products, which includes SUB (subbituminous coal) and BIT (bituminous coal). For this analysis I will look at the following categories:\n\nALL\nCOW (all coal)\nNatural Gas\nWND : Wind\nSUN : Solar\nHYC: conventional hydroelectric\nBIO: Biomass\n\n\n\n\n\n\n\nNote\n\n\n\nNote that depending on the state not all fuel type fields are returned. For example Colorado currently has no nuclear production, but data for other states may include this.\n\n\n\nCodedf &lt;- df %&gt;% \n  filter(fueltypeid %in% c('ALL','FOS','REN','COW','SUN','WND','NG','HYC','BIO','HPS'))"
  },
  {
    "objectID": "posts/EIA_Electric_Fuel_Breakdown/index.html#pie-chart-using-ggplot2",
    "href": "posts/EIA_Electric_Fuel_Breakdown/index.html#pie-chart-using-ggplot2",
    "title": "Calculating State Electricity Generation By Fuel Type using R",
    "section": "Pie chart using ggplot2",
    "text": "Pie chart using ggplot2\n\nCodedf_perc_long %&gt;% \n  filter(year==\"2021\") %&gt;% \n  ggplot(aes(x=\"\",y=percent,fill=FuelType))+\n  geom_bar(stat=\"identity\", width=1) +\n  coord_polar(\"y\", start=0) +\n  theme_void()+\n  geom_text(aes(label = paste0(round(percent,2), \"%\")),\n            position = position_stack(vjust=0.5)) +\n  labs(x = NULL, y = NULL, fill = NULL)\n\n\n\nPie chart of the perecent of total electricity generation by fuel type"
  },
  {
    "objectID": "posts/EIA_Electric_Fuel_Breakdown/index.html#pie-chart-using-plotly",
    "href": "posts/EIA_Electric_Fuel_Breakdown/index.html#pie-chart-using-plotly",
    "title": "Calculating State Electricity Generation By Fuel Type using R",
    "section": "Pie chart using Plotly",
    "text": "Pie chart using Plotly\nI found that I was able to easily make a little bit nicer-looking and interactive chart with plotly :\n\nCodedata &lt;- df_perc_long %&gt;% \n  filter(year==\"2021\") \n\nfig &lt;- plot_ly(data, labels = ~FuelType, values = ~percent, type = 'pie')\nfig &lt;- fig %&gt;% layout(title = 'Electricity Generation By Fuel Type for Colorado 2021',\n         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\n\nfig\n\n\nPie chart of the perecent of total electricity generation by fuel type"
  },
  {
    "objectID": "posts/EIA_Electric_Fuel_Breakdown/index.html#would-a-bar-chart-be-better",
    "href": "posts/EIA_Electric_Fuel_Breakdown/index.html#would-a-bar-chart-be-better",
    "title": "Calculating State Electricity Generation By Fuel Type using R",
    "section": "Would a bar chart be better?",
    "text": "Would a bar chart be better?\nIn general, I’m not a huge fan of piecharts; it can be difficult to judge the relative values (areas) of the different segments. So I thought I’d try displaying the data as a bar chart too.\n\n\n\n\n\n\nTip\n\n\n\nIf you want the bars to plot in order by their values, you can use the fct_reorder function from the forcats library (Wickham 2023a) to re-order the factor levels.\n\n\n\nCodedf_perc_long %&gt;% \n  filter(year==\"2021\") %&gt;% \n  mutate(FuelType=forcats::fct_reorder(FuelType,percent)) %&gt;% \n  ggplot(aes(FuelType,percent))+\n  geom_col(aes(fill=FuelType))+\n  xlab(\"Fuel Type\")+\n  ylab(\"Percent of Total Electric Generation\")+\n  ggtitle(\"% of Electric Generation by Fuel Type (CO 2021)\")+\n  coord_flip()\n\n\n\nBar chart of the perecent of total electricity generation by fuel type"
  },
  {
    "objectID": "posts/Storm_Prediction_Center/Severe_Weather_Mapping.html",
    "href": "posts/Storm_Prediction_Center/Severe_Weather_Mapping.html",
    "title": "Mapping Severe Thunderstorm Outlook in R using Leaflet",
    "section": "",
    "text": "Living on the Colorado front range in summer means dealing with a chance of thunderstorms almost every afternoon, some of which can become severe.\nIn this post I’ll go over how I mapped the severe thunderstorm risk outlook from the NOAA Storm Prediction Center , using R and leaflet.\n\nCodesuppressPackageStartupMessages(library(sf))\nlibrary(leaflet)\nlibrary(rvest)\nlibrary(stringr)\nlibrary(htmltools)"
  },
  {
    "objectID": "posts/Storm_Prediction_Center/Severe_Weather_Mapping.html#downloading-the-data",
    "href": "posts/Storm_Prediction_Center/Severe_Weather_Mapping.html#downloading-the-data",
    "title": "Mapping Severe Thunderstorm Outlook in R using Leaflet",
    "section": "Downloading the data",
    "text": "Downloading the data\nThe shapefiles can be downloaded manually by clicking the link on the website, but the link changes whenever the forecast is updated. I wanted to do this in a more programmatic way and be able to automatically find the link for the latest forecast without having to manually copy and paste the link each time I run it. I experimented with using the SelectorGadget to isolate the link, but found it easier to create a list of all the links in the page using the rvest (Wickham 2022) package and then find the link containing the shapefile (ends in .shp.zip).\n\nCodebase_url &lt;- \"https://www.spc.noaa.gov\"\n\n\n# Define a function to make a list of all links on a webpage\nget_all_links &lt;- function(page_url){\n  \n  # read the html from the website for day 1 outlook\n  html &lt;- rvest::read_html(page_url)\n  \n  # create a list of all the hyperlinks on the website\n  links &lt;- rvest::html_attr(html_nodes(html, \"a\"), \"href\")\n  \n}\n\nlinks &lt;- get_all_links(page_url=paste0(base_url,\"/products/outlook/day1otlk.html\"))\n\n# find the link for the shapefile (they only one that ends in 'shp.zip') \nshp_link &lt;- links[which(stringr::str_ends(links,'shp.zip'))]\nshp_url &lt;- paste0(base_url,shp_link)\nprint(paste('The latest shapefile as of ',Sys.time(),' is ',shp_url))\n\n[1] \"The latest shapefile as of  2023-07-06 10:20:49  is  https://www.spc.noaa.gov/products/outlook/archive/2023/day1otlk_20230706_1300-shp.zip\"\n\nCode# filename of shapefile\nshp_fname &lt;- basename(shp_url)\n#print(shp_fname)\n\n# base filename (remove *-shp.zip*) to use to load files later\nbasefname &lt;- stringr::str_remove(shp_fname,\"-shp.zip\")\n#print(basefname)\n\n\n\nNow that we have the link for the latest forecast, we can download the file (zip file) and unzip.\n\nThe unzipped folder contains shapefiles files for tornado,wind, and hail threat, but I will focus on just the categorical risk for severe thunderstorms (this is what you have probably seen on the weather forecast on the news). The shapfile I am interested in ends in cat.shp\nThen we can use the sf (Pebesma 2018) package to read the shapefile into R\n\n\nCode# destination to save downloaded file to\ndest_file &lt;- file.path('.','data',shp_fname)\n# download the zip file containing shapefiles\ndownload.file(url=shp_url,destfile = dest_file, method=\"curl\",quiet = TRUE)\n\n# unzip into a separate folder using base filename\nunzip(dest_file,exdir = file.path('.','data',basefname) )\n\n# read shapefile into R w/ sf package\ncat_file &lt;- stringr::str_remove(basename(shp_url),\"-shp.zip\")\ndat &lt;- sf::st_read(file.path('.','data',basefname,paste0(basefname,'_cat.shp')))\n\nReading layer `day1otlk_20230706_1300_cat' from data source \n  `/Users/andy/Projects/Andy_Pickering_Portfolio/posts/Storm_Prediction_Center/data/day1otlk_20230706_1300/day1otlk_20230706_1300_cat.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 4 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -123.85 ymin: 24.169 xmax: -67.471 ymax: 49.561\nGeodetic CRS:  WGS 84\n\n\nExamine the object extracted from the shapefile:\n\nCodeclass(dat)\n\n[1] \"sf\"         \"data.frame\"\n\nCodedat\n\nSimple feature collection with 4 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -123.85 ymin: 24.169 xmax: -67.471 ymax: 49.561\nGeodetic CRS:  WGS 84\n  DN        VALID       EXPIRE        ISSUE LABEL                     LABEL2\n1  2 202307061300 202307071200 202307061244  TSTM General Thunderstorms Risk\n2  3 202307061300 202307071200 202307061244  MRGL              Marginal Risk\n3  4 202307061300 202307071200 202307061244  SLGT                Slight Risk\n4  5 202307061300 202307071200 202307061244   ENH              Enhanced Risk\n   stroke    fill                       geometry\n1 #55BB55 #C1E9C1 POLYGON ((-92.46012 48.6844...\n2 #005500 #66A366 POLYGON ((-109.69 47.18, -1...\n3 #DDAA00 #FFE066 POLYGON ((-105.19 45.5, -10...\n4 #FF6600 #FFA366 POLYGON ((-102.51 39.91, -9..."
  },
  {
    "objectID": "posts/Ember_US_Electric_Total/Ember_US_elec_total.html",
    "href": "posts/Ember_US_Electric_Total/Ember_US_elec_total.html",
    "title": "Trends in US Electricity Generation and CO2 Emissions",
    "section": "",
    "text": "In this analysis I look at trends in US electricity generation and associated CO2 emissions, using a nice data set available from Ember. Ember provides monthly and yearly data on US electricity generation and emissions for the total US as well as by state, both in total and broken down by fuel types. In this first look at the data, I will limit my analysis to yearly data and total US generation/emissions."
  },
  {
    "objectID": "posts/Ember_US_Electric_Total/Ember_US_elec_total.html#generation-data",
    "href": "posts/Ember_US_Electric_Total/Ember_US_elec_total.html#generation-data",
    "title": "Trends in US Electricity Generation and CO2 Emissions",
    "section": "Generation Data",
    "text": "Generation Data\n\nCodedf_gen_yearly_UStot |&gt;\n  gt::gt() |&gt; \n  opt_row_striping() |&gt; \n  opt_interactive(use_highlight = TRUE, page_size_default = 5)"
  },
  {
    "objectID": "posts/Ember_US_Electric_Total/Ember_US_elec_total.html#emissions-data",
    "href": "posts/Ember_US_Electric_Total/Ember_US_elec_total.html#emissions-data",
    "title": "Trends in US Electricity Generation and CO2 Emissions",
    "section": "Emissions Data",
    "text": "Emissions Data\n\nCodedf_emis_yearly_UStot |&gt; \n  gt::gt() |&gt; \n  opt_row_striping() |&gt; \n  opt_interactive(use_highlight = TRUE, page_size_default = 5)"
  },
  {
    "objectID": "posts/Ember_US_Electric_Total/Ember_US_elec_total.html#further-exploration",
    "href": "posts/Ember_US_Electric_Total/Ember_US_elec_total.html#further-exploration",
    "title": "Trends in US Electricity Generation and CO2 Emissions",
    "section": "Further Exploration:",
    "text": "Further Exploration:\nSome of the areas I plan to explore in continuing analysis of this data include:\n\nBreaking down data by fuel types\nLooking at monthly data\nExamine correlation with weather/temperature\nLooking for changes in seasonal patterns of energy generation associated with home electrification (e.g. electric heat pumps replacing gas furnaces).\nBreak down by individual states"
  },
  {
    "objectID": "posts/Energy_Tidy_Tuesday/index.html",
    "href": "posts/Energy_Tidy_Tuesday/index.html",
    "title": "Tidy Tuesday Energy Analysis",
    "section": "",
    "text": "In this document I’ll analyze and visualize some energy data that were the focus of Tidy Tuesday2023 week 23. The data comes from Our World In Data and the full data set is available here. Data Source Citation: Ritchie, Roser, and Rosado (2022).\n\nI’ll start by loading libraries (tidyverse) and the data set. The result is a dataframe with a row for each country and year, from 1900-2002.\n\nCodesuppressPackageStartupMessages(library(tidyverse))\n\nowid_energy &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-06-06/owid-energy.csv',show_col_types = FALSE)\n\nhead(owid_energy)\n\n# A tibble: 6 × 129\n  country      year iso_code population   gdp biofuel_cons_change_pct\n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;                   &lt;dbl&gt;\n1 Afghanistan  1900 AFG         4832414    NA                      NA\n2 Afghanistan  1901 AFG         4879685    NA                      NA\n3 Afghanistan  1902 AFG         4935122    NA                      NA\n4 Afghanistan  1903 AFG         4998861    NA                      NA\n5 Afghanistan  1904 AFG         5063419    NA                      NA\n6 Afghanistan  1905 AFG         5128808    NA                      NA\n# ℹ 123 more variables: biofuel_cons_change_twh &lt;dbl&gt;,\n#   biofuel_cons_per_capita &lt;dbl&gt;, biofuel_consumption &lt;dbl&gt;,\n#   biofuel_elec_per_capita &lt;dbl&gt;, biofuel_electricity &lt;dbl&gt;,\n#   biofuel_share_elec &lt;dbl&gt;, biofuel_share_energy &lt;dbl&gt;,\n#   carbon_intensity_elec &lt;dbl&gt;, coal_cons_change_pct &lt;dbl&gt;,\n#   coal_cons_change_twh &lt;dbl&gt;, coal_cons_per_capita &lt;dbl&gt;,\n#   coal_consumption &lt;dbl&gt;, coal_elec_per_capita &lt;dbl&gt;, …\n\n\n\nHow many countries are in the dataset?\n\n\nCodelength(unique(owid_energy$country))\n\n[1] 306\n\n\nThat’s a lot! I’ll focus on just the United States for now.\n\nI also noticed that the data set goes back to 1900 but a a lot of the data for earlier years are missing/NA so I’ll filter those out as well.\nIt looks like we have data for the USA from 2000-2021.\n\nMake a new dataframe for just the USA data and remove years without data.\n\nCodeusa &lt;- owid_energy %&gt;% \n  filter(country==\"United States\") %&gt;% \n  filter(!is.na(electricity_demand))\n\nhead(usa)\n\n# A tibble: 6 × 129\n  country        year iso_code population     gdp biofuel_cons_change_pct\n  &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;   &lt;dbl&gt;                   &lt;dbl&gt;\n1 United States  2000 USA       282398560 1.30e13                   14.6 \n2 United States  2001 USA       285470496 1.31e13                    6.24\n3 United States  2002 USA       288350240 1.33e13                   19.5 \n4 United States  2003 USA       291109824 1.37e13                   35.7 \n5 United States  2004 USA       293947872 1.42e13                   26.2 \n6 United States  2005 USA       296842656 1.47e13                   16.8 \n# ℹ 123 more variables: biofuel_cons_change_twh &lt;dbl&gt;,\n#   biofuel_cons_per_capita &lt;dbl&gt;, biofuel_consumption &lt;dbl&gt;,\n#   biofuel_elec_per_capita &lt;dbl&gt;, biofuel_electricity &lt;dbl&gt;,\n#   biofuel_share_elec &lt;dbl&gt;, biofuel_share_energy &lt;dbl&gt;,\n#   carbon_intensity_elec &lt;dbl&gt;, coal_cons_change_pct &lt;dbl&gt;,\n#   coal_cons_change_twh &lt;dbl&gt;, coal_cons_per_capita &lt;dbl&gt;,\n#   coal_consumption &lt;dbl&gt;, coal_elec_per_capita &lt;dbl&gt;, …\n\n\n\nFor this analysis, I’ve chosen to investigate how the mix of fuel types used to generate electricity has changed over time. We need to reduce carbon emissionsIn order to prevent or mitigate the effects of climate change, and electricity generation is a large component of these emissions. I’m interested to see what progress has been made in transitioning to more renewable/low-carbon fuels for electricity generation.\nConveniently, the data already contain fields for the share of total electricity generation for each fuel type! I’ll make a new data frame with just these fields. I can select these columns (all ending in share_elec), using the ends_with function from the Wickham et al. (2023) package.\n\nCodeusa %&gt;% select(year,dplyr::ends_with('share_elec')) %&gt;% \n  head()\n\n# A tibble: 6 × 13\n   year biofuel_share_elec coal_share_elec fossil_share_elec gas_share_elec\n  &lt;dbl&gt;              &lt;dbl&gt;           &lt;dbl&gt;             &lt;dbl&gt;          &lt;dbl&gt;\n1  2000               1.60            51.7              70.9           16.2\n2  2001               1.34            51.1              71.9           17.1\n3  2002               1.40            50.3              71.0           18.0\n4  2003               1.38            51.0              71.2           16.8\n5  2004               1.36            50.1              71.3           18.0\n6  2005               1.34            49.9              71.9           18.9\n# ℹ 8 more variables: hydro_share_elec &lt;dbl&gt;, low_carbon_share_elec &lt;dbl&gt;,\n#   nuclear_share_elec &lt;dbl&gt;, oil_share_elec &lt;dbl&gt;,\n#   other_renewables_share_elec &lt;dbl&gt;, renewables_share_elec &lt;dbl&gt;,\n#   solar_share_elec &lt;dbl&gt;, wind_share_elec &lt;dbl&gt;\n\n\nNow I have a dataframe with just the variables I want to plot, but the format isn’t ideal; I would have to specify/plot each variable separately. What I want to do is give a single plot command and group/color the lines by the variable (fuel type). To achieve this, I am going to pivot the data frame from wide to long format. I believe this was previously referred to as gather or melt.\n\nCodeusa_share &lt;- usa %&gt;% select(year,ends_with('share_elec')) %&gt;% \n  tidyr::pivot_longer(cols=ends_with('share_elec'),\n                      names_to='FuelType',\n                      values_to = 'Percentage')\nhead(usa_share)\n\n# A tibble: 6 × 3\n   year FuelType              Percentage\n  &lt;dbl&gt; &lt;chr&gt;                      &lt;dbl&gt;\n1  2000 biofuel_share_elec          1.60\n2  2000 coal_share_elec            51.7 \n3  2000 fossil_share_elec          70.9 \n4  2000 gas_share_elec             16.2 \n5  2000 hydro_share_elec            7.10\n6  2000 low_carbon_share_elec      29.1 \n\n\nNow my dataframe has a row for each year, fuel type, and value, and I can simply group or color by the fuel type when I plot.\n\nCodeusa_share %&gt;% \n  ggplot(aes(year,Percentage))+\n  geom_line(aes(color=FuelType),linewidth=1.5)+\n  ggtitle(\"Percent of US electricity Generation By Fuel type\")+\n  xlab(\"Year\")+\n  ylab(\"Percent\")\n\n\n\nTimeseries of the percent of total US electricty generation by fuel type.\n\n\n\nHere we finally have a plot of the share of electricity generation by fuel type. We can see that the share of fossil fuels and coal has decreased, and renewable have increased. But there’s a lot on this plot and it’s hard to read, so I’ll focus down on some more specific subsets of the data.\n\nFirst we can look at the total shares of fossil (oil,coal, gas), renewable (wind, solar, hydro), and nuclear generation. Grouping into these categories de-clutters the plot and makes it easier to interpret.\n\nCodeusa %&gt;% select(year,fossil_share_elec,renewables_share_elec,nuclear_share_elec) %&gt;% \n  tidyr::pivot_longer(cols=dplyr::ends_with('share_elec'),\n               names_to='FuelType',\n               values_to = 'Percentage') %&gt;% \n  ggplot(aes(year,Percentage))+\n  geom_line(aes(color=FuelType),linewidth=1.5)+\n  ggtitle(\"Percent of US electricity Generation\")+\n  xlab(\"Year\")+\n  ylab(\"Percent\")\n\n\n\n\nObservations from this plot:\n\nFossil fuel share has been decreasing steadily since about 2007\nRenewable share has been increasing steadily since about 2007\nNuclear has remained relatively constant at around 20%.\nFossil share remains the majority of generation, but is decreasing. Renewables became approximately equal to nuclear around 2020 and are continuing to increase.\n\n\nIn this dataset, fossil fuels include coal, gas, and oil.\n\n\nCodeusa %&gt;% select(year,fossil_share_elec,oil_share_elec,gas_share_elec,coal_share_elec) %&gt;% \n  tidyr::pivot_longer(cols=dplyr::ends_with('share_elec'),\n               names_to='FuelType',\n               values_to = 'Percentage') %&gt;% \n  ggplot(aes(year,Percentage))+\n  geom_line(aes(color=FuelType),linewidth=1.5)+\n  ggtitle(\"Percent of US electricity Generation: Fossil Fuels\")+\n  xlab(\"Year\")+\n  ylab(\"Percent\")\n\n\n\n\nObservations from this plot:\n\nWe can see that the fossil fuel share of electricity generation has been decreasing, starting around 2008.\nCoal and gas make up the majority of the fossil fuel generation.\nCoal share has been decreasing while the gas share has increased. Coal was much higher than gas previously, but their shares became equal around 2015 and gas now makes up a larger share of the fossil fuel generation.\n\n\nIn this dataset, renewables include wind, solar, and hydro.\n\n\nCodeusa %&gt;% select(year,renewables_share_elec,solar_share_elec,\n               hydro_share_elec,wind_share_elec) %&gt;% \n  tidyr::pivot_longer(cols=dplyr::ends_with('share_elec'),\n               names_to='FuelType',\n               values_to = 'Percentage') %&gt;% \n  ggplot(aes(year,Percentage))+\n  geom_line(aes(color=FuelType),linewidth=1.5)+\n  ggtitle(\"Percent of US electricity Generation: Renewables\")+\n  xlab(\"Year\")+\n  ylab(\"Percent\")\n\n\n\n\nObservations from this plot:\n\nThe share of renewable electricity production has increased sharply, approximately doubling from 2008 to 2020.\nThe share of hydro generation has remained relatively constant.\n\nSolar and wind shares have increased significantly.\n\nWind started to increase earlier, around 2005.\nSolar started increasing around 2012"
  },
  {
    "objectID": "posts/Energy_Tidy_Tuesday/index.html#introduction",
    "href": "posts/Energy_Tidy_Tuesday/index.html#introduction",
    "title": "Tidy Tuesday Energy Analysis",
    "section": "",
    "text": "In this document I’ll analyze and visualize some energy data that were the focus of Tidy Tuesday2023 week 23. The data comes from Our World In Data and the full data set is available here. Data Source Citation: Ritchie, Roser, and Rosado (2022)."
  },
  {
    "objectID": "posts/Energy_Tidy_Tuesday/index.html#analysis-and-visualization",
    "href": "posts/Energy_Tidy_Tuesday/index.html#analysis-and-visualization",
    "title": "Tidy Tuesday Energy Analysis",
    "section": "",
    "text": "I’ll start by loading libraries (tidyverse) and the data set. The result is a dataframe with a row for each country and year, from 1900-2002.\n\nCodesuppressPackageStartupMessages(library(tidyverse))\n\nowid_energy &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-06-06/owid-energy.csv',show_col_types = FALSE)\n\nhead(owid_energy)\n\n# A tibble: 6 × 129\n  country      year iso_code population   gdp biofuel_cons_change_pct\n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;                   &lt;dbl&gt;\n1 Afghanistan  1900 AFG         4832414    NA                      NA\n2 Afghanistan  1901 AFG         4879685    NA                      NA\n3 Afghanistan  1902 AFG         4935122    NA                      NA\n4 Afghanistan  1903 AFG         4998861    NA                      NA\n5 Afghanistan  1904 AFG         5063419    NA                      NA\n6 Afghanistan  1905 AFG         5128808    NA                      NA\n# ℹ 123 more variables: biofuel_cons_change_twh &lt;dbl&gt;,\n#   biofuel_cons_per_capita &lt;dbl&gt;, biofuel_consumption &lt;dbl&gt;,\n#   biofuel_elec_per_capita &lt;dbl&gt;, biofuel_electricity &lt;dbl&gt;,\n#   biofuel_share_elec &lt;dbl&gt;, biofuel_share_energy &lt;dbl&gt;,\n#   carbon_intensity_elec &lt;dbl&gt;, coal_cons_change_pct &lt;dbl&gt;,\n#   coal_cons_change_twh &lt;dbl&gt;, coal_cons_per_capita &lt;dbl&gt;,\n#   coal_consumption &lt;dbl&gt;, coal_elec_per_capita &lt;dbl&gt;, …\n\n\n\nHow many countries are in the dataset?\n\n\nCodelength(unique(owid_energy$country))\n\n[1] 306\n\n\nThat’s a lot! I’ll focus on just the United States for now.\n\nI also noticed that the data set goes back to 1900 but a a lot of the data for earlier years are missing/NA so I’ll filter those out as well.\nIt looks like we have data for the USA from 2000-2021.\n\nMake a new dataframe for just the USA data and remove years without data.\n\nCodeusa &lt;- owid_energy %&gt;% \n  filter(country==\"United States\") %&gt;% \n  filter(!is.na(electricity_demand))\n\nhead(usa)\n\n# A tibble: 6 × 129\n  country        year iso_code population     gdp biofuel_cons_change_pct\n  &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;   &lt;dbl&gt;                   &lt;dbl&gt;\n1 United States  2000 USA       282398560 1.30e13                   14.6 \n2 United States  2001 USA       285470496 1.31e13                    6.24\n3 United States  2002 USA       288350240 1.33e13                   19.5 \n4 United States  2003 USA       291109824 1.37e13                   35.7 \n5 United States  2004 USA       293947872 1.42e13                   26.2 \n6 United States  2005 USA       296842656 1.47e13                   16.8 \n# ℹ 123 more variables: biofuel_cons_change_twh &lt;dbl&gt;,\n#   biofuel_cons_per_capita &lt;dbl&gt;, biofuel_consumption &lt;dbl&gt;,\n#   biofuel_elec_per_capita &lt;dbl&gt;, biofuel_electricity &lt;dbl&gt;,\n#   biofuel_share_elec &lt;dbl&gt;, biofuel_share_energy &lt;dbl&gt;,\n#   carbon_intensity_elec &lt;dbl&gt;, coal_cons_change_pct &lt;dbl&gt;,\n#   coal_cons_change_twh &lt;dbl&gt;, coal_cons_per_capita &lt;dbl&gt;,\n#   coal_consumption &lt;dbl&gt;, coal_elec_per_capita &lt;dbl&gt;, …\n\n\n\nFor this analysis, I’ve chosen to investigate how the mix of fuel types used to generate electricity has changed over time. We need to reduce carbon emissionsIn order to prevent or mitigate the effects of climate change, and electricity generation is a large component of these emissions. I’m interested to see what progress has been made in transitioning to more renewable/low-carbon fuels for electricity generation.\nConveniently, the data already contain fields for the share of total electricity generation for each fuel type! I’ll make a new data frame with just these fields. I can select these columns (all ending in share_elec), using the ends_with function from the Wickham et al. (2023) package.\n\nCodeusa %&gt;% select(year,dplyr::ends_with('share_elec')) %&gt;% \n  head()\n\n# A tibble: 6 × 13\n   year biofuel_share_elec coal_share_elec fossil_share_elec gas_share_elec\n  &lt;dbl&gt;              &lt;dbl&gt;           &lt;dbl&gt;             &lt;dbl&gt;          &lt;dbl&gt;\n1  2000               1.60            51.7              70.9           16.2\n2  2001               1.34            51.1              71.9           17.1\n3  2002               1.40            50.3              71.0           18.0\n4  2003               1.38            51.0              71.2           16.8\n5  2004               1.36            50.1              71.3           18.0\n6  2005               1.34            49.9              71.9           18.9\n# ℹ 8 more variables: hydro_share_elec &lt;dbl&gt;, low_carbon_share_elec &lt;dbl&gt;,\n#   nuclear_share_elec &lt;dbl&gt;, oil_share_elec &lt;dbl&gt;,\n#   other_renewables_share_elec &lt;dbl&gt;, renewables_share_elec &lt;dbl&gt;,\n#   solar_share_elec &lt;dbl&gt;, wind_share_elec &lt;dbl&gt;\n\n\nNow I have a dataframe with just the variables I want to plot, but the format isn’t ideal; I would have to specify/plot each variable separately. What I want to do is give a single plot command and group/color the lines by the variable (fuel type). To achieve this, I am going to pivot the data frame from wide to long format. I believe this was previously referred to as gather or melt.\n\nCodeusa_share &lt;- usa %&gt;% select(year,ends_with('share_elec')) %&gt;% \n  tidyr::pivot_longer(cols=ends_with('share_elec'),\n                      names_to='FuelType',\n                      values_to = 'Percentage')\nhead(usa_share)\n\n# A tibble: 6 × 3\n   year FuelType              Percentage\n  &lt;dbl&gt; &lt;chr&gt;                      &lt;dbl&gt;\n1  2000 biofuel_share_elec          1.60\n2  2000 coal_share_elec            51.7 \n3  2000 fossil_share_elec          70.9 \n4  2000 gas_share_elec             16.2 \n5  2000 hydro_share_elec            7.10\n6  2000 low_carbon_share_elec      29.1 \n\n\nNow my dataframe has a row for each year, fuel type, and value, and I can simply group or color by the fuel type when I plot.\n\nCodeusa_share %&gt;% \n  ggplot(aes(year,Percentage))+\n  geom_line(aes(color=FuelType),linewidth=1.5)+\n  ggtitle(\"Percent of US electricity Generation By Fuel type\")+\n  xlab(\"Year\")+\n  ylab(\"Percent\")\n\n\n\nTimeseries of the percent of total US electricty generation by fuel type.\n\n\n\nHere we finally have a plot of the share of electricity generation by fuel type. We can see that the share of fossil fuels and coal has decreased, and renewable have increased. But there’s a lot on this plot and it’s hard to read, so I’ll focus down on some more specific subsets of the data.\n\nFirst we can look at the total shares of fossil (oil,coal, gas), renewable (wind, solar, hydro), and nuclear generation. Grouping into these categories de-clutters the plot and makes it easier to interpret.\n\nCodeusa %&gt;% select(year,fossil_share_elec,renewables_share_elec,nuclear_share_elec) %&gt;% \n  tidyr::pivot_longer(cols=dplyr::ends_with('share_elec'),\n               names_to='FuelType',\n               values_to = 'Percentage') %&gt;% \n  ggplot(aes(year,Percentage))+\n  geom_line(aes(color=FuelType),linewidth=1.5)+\n  ggtitle(\"Percent of US electricity Generation\")+\n  xlab(\"Year\")+\n  ylab(\"Percent\")\n\n\n\n\nObservations from this plot:\n\nFossil fuel share has been decreasing steadily since about 2007\nRenewable share has been increasing steadily since about 2007\nNuclear has remained relatively constant at around 20%.\nFossil share remains the majority of generation, but is decreasing. Renewables became approximately equal to nuclear around 2020 and are continuing to increase.\n\n\nIn this dataset, fossil fuels include coal, gas, and oil.\n\n\nCodeusa %&gt;% select(year,fossil_share_elec,oil_share_elec,gas_share_elec,coal_share_elec) %&gt;% \n  tidyr::pivot_longer(cols=dplyr::ends_with('share_elec'),\n               names_to='FuelType',\n               values_to = 'Percentage') %&gt;% \n  ggplot(aes(year,Percentage))+\n  geom_line(aes(color=FuelType),linewidth=1.5)+\n  ggtitle(\"Percent of US electricity Generation: Fossil Fuels\")+\n  xlab(\"Year\")+\n  ylab(\"Percent\")\n\n\n\n\nObservations from this plot:\n\nWe can see that the fossil fuel share of electricity generation has been decreasing, starting around 2008.\nCoal and gas make up the majority of the fossil fuel generation.\nCoal share has been decreasing while the gas share has increased. Coal was much higher than gas previously, but their shares became equal around 2015 and gas now makes up a larger share of the fossil fuel generation.\n\n\nIn this dataset, renewables include wind, solar, and hydro.\n\n\nCodeusa %&gt;% select(year,renewables_share_elec,solar_share_elec,\n               hydro_share_elec,wind_share_elec) %&gt;% \n  tidyr::pivot_longer(cols=dplyr::ends_with('share_elec'),\n               names_to='FuelType',\n               values_to = 'Percentage') %&gt;% \n  ggplot(aes(year,Percentage))+\n  geom_line(aes(color=FuelType),linewidth=1.5)+\n  ggtitle(\"Percent of US electricity Generation: Renewables\")+\n  xlab(\"Year\")+\n  ylab(\"Percent\")\n\n\n\n\nObservations from this plot:\n\nThe share of renewable electricity production has increased sharply, approximately doubling from 2008 to 2020.\nThe share of hydro generation has remained relatively constant.\n\nSolar and wind shares have increased significantly.\n\nWind started to increase earlier, around 2005.\nSolar started increasing around 2012"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Predicting Trailhead Parking Fullness at JeffCo Open Space Trailheads : Using a model to predict parking lot usage at Jefferson County Open Space trailheads in Colorado.\nJournalists Under Fire : An analysis of global threats to journalists and press freedom."
  },
  {
    "objectID": "projects.html#a-list-of-some-of-my-data-science-projects",
    "href": "projects.html#a-list-of-some-of-my-data-science-projects",
    "title": "Projects",
    "section": "",
    "text": "Predicting Trailhead Parking Fullness at JeffCo Open Space Trailheads : Using a model to predict parking lot usage at Jefferson County Open Space trailheads in Colorado.\nJournalists Under Fire : An analysis of global threats to journalists and press freedom."
  },
  {
    "objectID": "publications.html",
    "href": "publications.html",
    "title": "Publications",
    "section": "",
    "text": "Pickering et al. (2015)\nPickering and Alford (2012)\nAlford et al. (2015)"
  },
  {
    "objectID": "publications.html#selected-scientific-publications",
    "href": "publications.html#selected-scientific-publications",
    "title": "Publications",
    "section": "",
    "text": "Pickering et al. (2015)\nPickering and Alford (2012)\nAlford et al. (2015)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome! I am a data scientist interested in energy and the environment (among many other topics). On this website you can find my portfolio and resume, as well as blog posts about interesting analyses I am working on. I’ve also created a list of resources that I’ve found helpful in learning data science or finding data sets. Enjoy!"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Data Science Resources",
    "section": "",
    "text": "R-bloggers"
  },
  {
    "objectID": "resources.html#r",
    "href": "resources.html#r",
    "title": "Data Science Resources",
    "section": "",
    "text": "R-bloggers"
  },
  {
    "objectID": "resources.html#python",
    "href": "resources.html#python",
    "title": "Data Science Resources",
    "section": "Python",
    "text": "Python"
  },
  {
    "objectID": "resources.html#quarto",
    "href": "resources.html#quarto",
    "title": "Data Science Resources",
    "section": "Quarto",
    "text": "Quarto\n\nhttps://quarto.org/\nTutorial on Creating a Data Science Portfolio with Quarto\nMarkdown basics"
  },
  {
    "objectID": "resources.html#data",
    "href": "resources.html#data",
    "title": "Data Science Resources",
    "section": "Data",
    "text": "Data\n\nEnergy\n\nAlternative Fuels Data Center\nU.S. Energy Information Administration (EIA)\n\n\n\nOther\n\nData Is Plural"
  },
  {
    "objectID": "resources.html#miscellaneous",
    "href": "resources.html#miscellaneous",
    "title": "Data Science Resources",
    "section": "Miscellaneous",
    "text": "Miscellaneous\n\nA guide to standard HTTP Status Codes that may be returned when requesting data from an API."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Posts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nTrends in US Electricity Generation and CO2 Emissions\n\n\n\n\n\n\n\nenergy\n\n\nR\n\n\nvisualization\n\n\n\n\n\n\n\n\n\n\n\nNov 19, 2023\n\n\nAndy Pickering\n\n\n\n\n\n\n  \n\n\n\n\nMapping the Number of EV Charging Stations by County in Colorado Using R\n\n\n\n\n\n\n\nEV\n\n\nR\n\n\nvisualization\n\n\nmapping\n\n\nAPI\n\n\n\n\n\n\n\n\n\n\n\nAug 1, 2023\n\n\nAndy Pickering\n\n\n\n\n\n\n  \n\n\n\n\nCalculating State Electricity Generation By Fuel Type using R\n\n\n\n\n\n\n\nenergy\n\n\nEIA\n\n\nR\n\n\nvisualization\n\n\nAPI\n\n\n\n\n\n\n\n\n\n\n\nJul 14, 2023\n\n\nAndy Pickering\n\n\n\n\n\n\n  \n\n\n\n\nMapping Severe Thunderstorm Outlook in R using Leaflet\n\n\n\n\n\n\n\nweather\n\n\nR\n\n\nvisualization\n\n\nmapping\n\n\ngeospatial\n\n\nleaflet\n\n\n\n\n\n\n\n\n\n\n\nJun 29, 2023\n\n\n\n\n\n\n  \n\n\n\n\nEV Charging Stations Analysis\n\n\n\n\n\n\n\nenergy\n\n\nEV\n\n\nR\n\n\nvisualization\n\n\nAPI\n\n\n\n\n\n\n\n\n\n\n\nJun 20, 2023\n\n\n\n\n\n\n  \n\n\n\n\nTidy Tuesday Energy Analysis\n\n\n\n\n\n\n\nenergy\n\n\nTidyTuesday\n\n\nR\n\n\nvisualization\n\n\n\n\n\n\n\n\n\n\n\nJun 17, 2023\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJun 14, 2023\n\n\nAndy Pickering\n\n\n\n\n\n\nNo matching items"
  }
]